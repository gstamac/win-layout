<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Win32Interop.WinHandles</name>
    </assembly>
    <members>
        <member name="T:Win32Interop.WinHandles.WindowHandle">
            <summary>
             Small wrapper class to allow extension methods specific to Win32 windows.
            </summary>
        </member>
        <member name="M:Win32Interop.WinHandles.WindowHandle.#ctor(System.IntPtr)">
            <summary> Constructor. </summary>
            <param name="rawPtr"> A raw IntPtr to the Win32 handle. </param>
        </member>
        <member name="P:Win32Interop.WinHandles.WindowHandle.Invalid">
            <summary> Represents an invalid window handle. </summary>
        </member>
        <member name="P:Win32Interop.WinHandles.WindowHandle.RawPtr">
            <summary> A raw IntPtr to the Win32 handle. </summary>
        </member>
        <member name="P:Win32Interop.WinHandles.WindowHandle.IsValid">
            <summary> True if the handle represents a valid Win32 handle. </summary>
        </member>
        <member name="T:Win32Interop.WinHandles.Internal.NativeMethods">
            <summary> Win32 methods. </summary>
        </member>
        <member name="M:Win32Interop.WinHandles.Internal.NativeMethods.GetWindowPlacement(System.IntPtr,Win32Interop.WinHandles.WindowHandleExtensions.WINDOWPLACEMENT@)">
            <summary>
            Retrieves the show state and the restored, minimized, and maximized positions of the specified window.
            </summary>
            <param name="hWnd">
            A handle to the window.
            </param>
            <param name="lpwndpl">
            A pointer to the WINDOWPLACEMENT structure that receives the show state and position information.
            <para>
            Before calling GetWindowPlacement, set the length member to sizeof(WINDOWPLACEMENT). GetWindowPlacement fails if lpwndpl-> length is not set correctly.
            </para>
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            <para>
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </para>
            </returns>
        </member>
        <member name="T:Win32Interop.WinHandles.WindowHandleExtensions">
            <summary> Extension methods for <see cref="T:Win32Interop.WinHandles.WindowHandle"/> </summary>
        </member>
        <member name="T:Win32Interop.WinHandles.WindowHandleExtensions.WindowShowStyle">
            <summary>Enumeration of the different ways of showing a window using 
            ShowWindow</summary>
        </member>
        <member name="F:Win32Interop.WinHandles.WindowHandleExtensions.WindowShowStyle.Hide">
            <summary>Hides the window and activates another window.</summary>
            <remarks>See SW_HIDE</remarks>
        </member>
        <member name="F:Win32Interop.WinHandles.WindowHandleExtensions.WindowShowStyle.ShowNormal">
            <summary>Activates and displays a window. If the window is minimized 
            or maximized, the system restores it to its original size and 
            position. An application should specify this flag when displaying 
            the window for the first time.</summary>
            <remarks>See SW_SHOWNORMAL</remarks>
        </member>
        <member name="F:Win32Interop.WinHandles.WindowHandleExtensions.WindowShowStyle.ShowMinimized">
            <summary>Activates the window and displays it as a minimized window.</summary>
            <remarks>See SW_SHOWMINIMIZED</remarks>
        </member>
        <member name="F:Win32Interop.WinHandles.WindowHandleExtensions.WindowShowStyle.ShowMaximized">
            <summary>Activates the window and displays it as a maximized window.</summary>
            <remarks>See SW_SHOWMAXIMIZED</remarks>
        </member>
        <member name="F:Win32Interop.WinHandles.WindowHandleExtensions.WindowShowStyle.Maximize">
            <summary>Maximizes the specified window.</summary>
            <remarks>See SW_MAXIMIZE</remarks>
        </member>
        <member name="F:Win32Interop.WinHandles.WindowHandleExtensions.WindowShowStyle.ShowNormalNoActivate">
            <summary>Displays a window in its most recent size and position. 
            This value is similar to "ShowNormal", except the window is not 
            actived.</summary>
            <remarks>See SW_SHOWNOACTIVATE</remarks>
        </member>
        <member name="F:Win32Interop.WinHandles.WindowHandleExtensions.WindowShowStyle.Show">
            <summary>Activates the window and displays it in its current size 
            and position.</summary>
            <remarks>See SW_SHOW</remarks>
        </member>
        <member name="F:Win32Interop.WinHandles.WindowHandleExtensions.WindowShowStyle.Minimize">
            <summary>Minimizes the specified window and activates the next 
            top-level window in the Z order.</summary>
            <remarks>See SW_MINIMIZE</remarks>
        </member>
        <member name="F:Win32Interop.WinHandles.WindowHandleExtensions.WindowShowStyle.ShowMinNoActivate">
            <summary>Displays the window as a minimized window. This value is 
            similar to "ShowMinimized", except the window is not activated.</summary>
            <remarks>See SW_SHOWMINNOACTIVE</remarks>
        </member>
        <member name="F:Win32Interop.WinHandles.WindowHandleExtensions.WindowShowStyle.ShowNoActivate">
            <summary>Displays the window in its current size and position. This 
            value is similar to "Show", except the window is not activated.</summary>
            <remarks>See SW_SHOWNA</remarks>
        </member>
        <member name="F:Win32Interop.WinHandles.WindowHandleExtensions.WindowShowStyle.Restore">
            <summary>Activates and displays the window. If the window is 
            minimized or maximized, the system restores it to its original size 
            and position. An application should specify this flag when restoring 
            a minimized window.</summary>
            <remarks>See SW_RESTORE</remarks>
        </member>
        <member name="F:Win32Interop.WinHandles.WindowHandleExtensions.WindowShowStyle.ShowDefault">
            <summary>Sets the show state based on the SW_ value specified in the 
            STARTUPINFO structure passed to the CreateProcess function by the 
            program that started the application.</summary>
            <remarks>See SW_SHOWDEFAULT</remarks>
        </member>
        <member name="F:Win32Interop.WinHandles.WindowHandleExtensions.WindowShowStyle.ForceMinimized">
            <summary>Windows 2000/XP: Minimizes a window, even if the thread 
            that owns the window is hung. This flag should only be used when 
            minimizing windows from a different thread.</summary>
            <remarks>See SW_FORCEMINIMIZE</remarks>
        </member>
        <member name="M:Win32Interop.WinHandles.WindowHandleExtensions.IsVisible(Win32Interop.WinHandles.WindowHandle)">
            <summary> Check if the given window handle is currently visible. </summary>
            <param name="windowHandle"> The window to act on. </param>
            <returns> true if the window is visible, false if not. </returns>
        </member>
        <member name="M:Win32Interop.WinHandles.WindowHandleExtensions.GetClassName(Win32Interop.WinHandles.WindowHandle)">
            <summary> Gets the Win32 class name of the given window. </summary>
            <param name="windowHandle"> The window handle to act on. </param>
            <returns> The class name of the passed in window. </returns>
        </member>
        <member name="M:Win32Interop.WinHandles.WindowHandleExtensions.GetWindowText(Win32Interop.WinHandles.WindowHandle)">
            <summary> Gets the text associated with the given window handle. </summary>
            <param name="windowHandle"> The window handle to act on. </param>
            <returns> The window text. </returns>
        </member>
        <member name="M:Win32Interop.WinHandles.WindowHandleExtensions.GetWindowExec(Win32Interop.WinHandles.WindowHandle)">
            <summary> Gets the executable associated with the given window handle. </summary>
            <param name="windowHandle"> The window handle to act on. </param>
            <returns> The executable filename. </returns>
        </member>
        <member name="T:Win32Interop.WinHandles.TopLevelWindowUtils">
            <summary>
             Utilities for operating on windows that are top-level on the screen.
            </summary>
        </member>
        <member name="M:Win32Interop.WinHandles.TopLevelWindowUtils.GetForegroundWindow">
            <summary> Gets the WindowHandle to the current foreground window. </summary>
            <returns> The foreground window. </returns>
        </member>
        <member name="M:Win32Interop.WinHandles.TopLevelWindowUtils.FindWindows(System.Predicate{Win32Interop.WinHandles.WindowHandle},Win32Interop.WinHandles.TopLevelWindowUtils.FindWindowSortType)">
            <summary> Finds all the windows that match the given predicate. </summary>
            <exception cref="T:System.ArgumentNullException"> Thrown when one or more required
             arguments are null. </exception>
            <param name="windowPredicate"> A predicate which determines if the given
             window should be included in the collection returned. </param>
            <param name="sortType"> Indicate the way in which the returned values
             should be sorted</param>
            <returns> A collection of windows that passed the predicate. </returns>
        </member>
        <member name="M:Win32Interop.WinHandles.TopLevelWindowUtils.FindWindow(System.Predicate{Win32Interop.WinHandles.WindowHandle})">
            <summary>
             Searches for the first window that matches the predicate.
            </summary>
            <exception cref="T:System.ArgumentNullException"> Thrown when one or more required
             arguments are null. </exception>
            <param name="callback"> The search criteria for the window.  Return true
             when the window has been found. </param>
            <returns>
             The window handle for which callback() returned true, or
             <see cref="P:Win32Interop.WinHandles.WindowHandle.Invalid"/> if callback() never returned true.
            </returns>
        </member>
    </members>
</doc>
